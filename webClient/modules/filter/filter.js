// Generated by CoffeeScript 1.6.3
(function() {
  var RDFS_NS, RDF_NS, controller, model, view, _base, _ref;

  _ref = window.swe, RDFS_NS = _ref.RDFS_NS, RDF_NS = _ref.RDF_NS;

  controller = function(sb) {
    var destroy, init, model, obj2arr, parseResult, search, searchForClasses, searchForProperties, update, view;
    model = null;
    view = null;
    init = function() {
      model = sb.getModel("model");
      model.subscribe(this);
      view = new sb.getView("view")(sb, model);
      view.init();
      search();
      return sb.subscribe("cli", search);
    };
    search = function() {
      searchForClasses();
      return searchForProperties();
    };
    searchForClasses = function() {
      var sparql;
      sparql = "SELECT DISTINCT ?s\nWHERE { ?s <" + RDF_NS + "type> <" + RDFS_NS + "\"Class> . }\nORDER BY ?s";
      return $.ajax({
        url: "sparql?" + $.param({
          query: sparql
        }),
        dataType: "text",
        success: function(res) {
          model.classesAvailable = parseResult(res);
          return model.notify();
        }
      });
    };
    searchForProperties = function() {
      var sparql;
      sparql = "SELECT DISTINCT ?s\nWHERE { ?s <" + RDF_NS + "type> <" + RDF_NS + "Property> . }\nORDER BY ?s";
      return $.ajax({
        url: "sparql?" + $.param({
          query: sparql
        }),
        dataType: "text",
        success: function(res) {
          model.propertiesAvailable = parseResult(res);
          return model.notify();
        }
      });
    };
    parseResult = function(res) {
      var results;
      results = {};
      $.each(res.split(/\n/), function(i, resource) {
        return results[resource] = resource.split('#')[1];
      });
      return results;
    };
    update = function() {
      return sb.publish("filter", {
        classes: obj2arr(model.classesSelected),
        properties: obj2arr(model.propertiesSelected)
      });
    };
    obj2arr = function(obj) {
      var k, v, _results;
      _results = [];
      for (k in obj) {
        v = obj[k];
        _results.push(v);
      }
      return _results;
    };
    destroy = function() {};
    return {
      init: init,
      destroy: destroy,
      update: update
    };
  };

  model = {
    classesAvailable: {},
    classesSelected: {},
    propertiesAvailable: {},
    propertiesSelected: {}
  };

  view = function(sb, model) {
    var c, init, tmpl, toggle, toggleClass, toggleProperty, update;
    c = null;
    tmpl = null;
    update = function(ev) {
      c.empty();
      return sb.tmpl(tmpl, model).appendTo(c);
    };
    init = function() {
      model.subscribe(this);
      tmpl = sb.getTemplate("filter");
      c = sb.getContainer();
      c.delegate(".classes li", "click", toggleClass);
      c.delegate(".properties li", "click", toggleProperty);
      return update();
    };
    toggleClass = function(ev) {
      toggle(model.classesSelected, ($(this)).attr('rel'));
      return model.notify();
    };
    toggleProperty = function(ev) {
      toggle(model.propertiesSelected, ($(this)).attr('rel'));
      return model.notify();
    };
    toggle = function(obj, id) {
      if (obj[id]) {
        return delete obj[id];
      } else {
        return obj[id] = id;
      }
    };
    return {
      init: init,
      update: update
    };
  };

  if ((_base = swe.modules).filter == null) {
    _base.filter = {
      controller: controller,
      model: model,
      view: view
    };
  }

}).call(this);
