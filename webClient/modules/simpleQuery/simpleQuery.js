// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2011 - 2013 Markus Kohlhase <mail@markus-kohlhase.de>
*/


(function() {
  var RDFS_NS, RDF_NS, controller, model, view, _base, _ref;

  _ref = window.swe, RDFS_NS = _ref.RDFS_NS, RDF_NS = _ref.RDF_NS;

  controller = function(sb) {
    var destroy, init, model, onCli, onFilter, onSelect, parseResult, search, update, view;
    model = null;
    view = null;
    init = function() {
      model = sb.getModel("model");
      model.subscribe(this);
      view = new sb.getView("view")(sb, model);
      view.init();
      sb.subscribe("cli", onCli);
      sb.subscribe("filter", onFilter);
      return sb.subscribe("simpleQuery/select", onSelect);
    };
    onCli = function(term) {
      model.searchTerm = term;
      return search();
    };
    onFilter = function(filter) {
      model.filter = filter;
      return search();
    };
    onSelect = function(id) {
      model.selected = id;
      return model.notify();
    };
    search = function() {
      var c, classes, i, p, properties, sparql;
      classes = ((function() {
        var _ref1, _results;
        _ref1 = model.filter.classes;
        _results = [];
        for (c in _ref1) {
          i = _ref1[c];
          _results.push("?s <" + RDFS_NS + "subClassOf> <" + c + "> .");
        }
        return _results;
      })()).join(" ");
      properties = ((function() {
        var _ref1, _results;
        _ref1 = model.filter.properties;
        _results = [];
        for (p in _ref1) {
          i = _ref1[p];
          _results.push("?x <" + p + "> ?s .");
        }
        return _results;
      })()).join(" ");
      sparql = "SELECT DISTINCT ?s\nWHERE { ?s ?p ?o . " + classes + " " + properties + "\nFILTER ( regex( str(?s) , '(?i)" + model.searchTerm + "' ) ) }\nORDER BY ?s";
      sb.debug(sparql);
      return $.ajax({
        url: "sparql?" + $.param({
          query: sparql
        }),
        dataType: "text",
        success: function(res) {
          model.results = parseResult(res);
          return model.notify();
        }
      });
    };
    parseResult = function(res) {
      return $.map(res.split(/\n/), function(resource) {
        return {
          string: resource,
          fragment: resource.split('#')[1]
        };
      });
    };
    update = function() {};
    destroy = function() {};
    return {
      init: init,
      destroy: destroy,
      update: update
    };
  };

  model = {
    searchTerm: "",
    results: [],
    filter: {
      classes: [],
      properties: []
    },
    selected: ""
  };

  view = function(sb, model) {
    var c, init, result, select, tmpl, update;
    result = null;
    c = null;
    tmpl = null;
    update = function(ev) {
      c.empty();
      return sb.tmpl(tmpl, {
        results: model.results,
        selected: model.selected
      }).appendTo(c);
    };
    select = function(ev) {
      return sb.publish("simpleQuery/select", ($(this)).attr('rel'));
    };
    init = function() {
      model.subscribe(this);
      tmpl = sb.getTemplate("result");
      c = sb.getContainer();
      return c.delegate("li", "click", select);
    };
    return {
      init: init,
      update: update
    };
  };

  if ((_base = swe.modules).simpleQuery == null) {
    _base.simpleQuery = {
      controller: controller,
      model: model,
      view: view
    };
  }

}).call(this);
